{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ODK-AI: Coding Ontologies Using AI Tools","text":"<p>ODK-AI is a Docker container for running claude-code (and in future, similar tools) with ontologies. It is designed to be executed either interactively or in \"headless\" mode.</p> <p>For more details, see this tutorial (in progress)</p> <p>The container extends ODK, which means any tool available to ODK (e.g. ROBOT) is available for <code>claude-code</code> to use.</p>"},{"location":"#ontology-development-is-a-team-science-with-many-agents","title":"Ontology Development is a Team Science with many \"Agents\"","text":"<p>Ontology development is typically a collaborative process involving multiple stakeholders. The diagram below illustrates the traditional workflow:</p> <pre><code>graph TD\n    A[Scientists] --&gt;|Write papers| B[Scientific Literature]\n    B --&gt; C[Curators]\n    C --&gt;|Curate and extract terms| D[GitHub Issues]\n    D --&gt; E[Ontology Editors]\n    E --&gt;|Edit ontology with Prot\u00e9g\u00e9| F[Changes to ontology files]\n    F --&gt;|Push to repository| G[Pull Requests]\n    G --&gt; H[Ontology Reviewers]\n    H --&gt;|Review and approve| I[Merged Changes]\n    I --&gt; J[Updated Ontology]\n    J --&gt;|Used by| A\n\n    style A fill:#f9f,stroke:#333,stroke-width:2px\n    style C fill:#bbf,stroke:#333,stroke-width:2px\n    style E fill:#bfb,stroke:#333,stroke-width:2px\n    style H fill:#fbb,stroke:#333,stroke-width:2px</code></pre> <p>This team science approach involves multiple human \"agents\" with specialized roles working together to maintain and expand ontologies.</p> <p>ODK-AI is designed to help with any piece of this that involves interacting with GitHub</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Built on ODK container with tools like ROBOT already installed</li> <li>Automatically initializes template files for your ontology project</li> <li>Supports both interactive and headless modes </li> <li>Can create and manage pull requests</li> <li>GitHub CLI integration for issue tracking</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get up and running with:</p> <pre><code>docker run -v $PWD:/work -e ANTHROPIC_API_KEY=$ANTHROPIC_API_KEY -it --rm cmungall/odk-ai:latest\n</code></pre> <p>See the Getting Started guide for more details.</p>"},{"location":"#caveats","title":"Caveats","text":"<ul> <li>Workflow is primarily tested with ontologies that keep their source in <code>.obo</code> format</li> <li>This project is in early development and may have bugs</li> </ul>"},{"location":"building/","title":"Building ODK-AI","text":"<p>This document explains how to build the ODK-AI Docker image from source.</p>"},{"location":"building/#prerequisites","title":"Prerequisites","text":"<p>Before building the Docker image, you need:</p> <ol> <li>Docker installed on your system</li> <li>A GitHub token for authentication (required during the build process)</li> <li>Git to clone the repository</li> </ol>"},{"location":"building/#building-the-image","title":"Building the Image","text":""},{"location":"building/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/cmungall/ontology-coder.git\ncd ontology-coder\n</code></pre>"},{"location":"building/#2-set-your-github-token","title":"2. Set Your GitHub Token","text":"<p>The build process requires a GitHub token to authenticate with GitHub services during the build. You can create a token at https://github.com/settings/tokens.</p> <p>Export your GitHub token as an environment variable:</p> <pre><code>export GH_TOKEN=your_github_token\n</code></pre> <p>Warning</p> <p>The Makefile will check if this environment variable is set before building. If not set, the build will fail with an error message.</p>"},{"location":"building/#3-run-the-build-command","title":"3. Run the Build Command","text":"<p>To build the Docker image locally:</p> <pre><code>make build\n</code></pre> <p>This will create a Docker image named <code>odk-ai:latest</code> on your local system.</p>"},{"location":"building/#build-options","title":"Build Options","text":"<p>The Makefile has several options that can be used:</p> <ul> <li><code>make build</code>: Build the Docker image (requires GH_TOKEN)</li> <li><code>make push</code>: Build and push the image to DockerHub (as cmungall/odk-ai:latest)</li> <li><code>make run</code>: Run the container interactively</li> <li><code>make test</code>: Run tests in a scratch directory</li> </ul>"},{"location":"building/#customizing-the-build","title":"Customizing the Build","text":"<p>If you need to customize the build, you can modify the following settings in the Makefile:</p> <pre><code>IMAGE_NAME = odk-ai\nTAG = latest\n\n# Uncomment to force a clean build\n#BUILD_OPTS = --no-cache\n</code></pre> <p>You can also modify the Dockerfile directly to add additional dependencies or change the configuration.</p>"},{"location":"building/#building-without-cache","title":"Building Without Cache","text":"<p>If you want to rebuild everything from scratch (ignoring the cache):</p> <pre><code>make build BUILD_OPTS=--no-cache\n</code></pre>"},{"location":"building/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Error: \"GH_TOKEN environment variable is not set\" - You need to set your GitHub token as described above</li> <li>Docker build errors - Make sure Docker is running and you have sufficient permissions</li> <li>Network errors during build - Check your internet connection, as the build process downloads packages</li> </ul>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#preserving-configs","title":"Preserving Configs","text":"<p>After authentication in Docker:</p> <pre><code>cp -pr ~/.config .\ncp ~/.claude.json .\n</code></pre> <p>Then the next time you start the container:</p> <pre><code>cp -pr .config ~\ncp .claude.json ~\n</code></pre>"},{"location":"configuration/#github-actions-configuration","title":"GitHub Actions Configuration","text":"<p>Coming soon</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#general","title":"General","text":""},{"location":"faq/#what-is-odk-ai","title":"What is ODK-AI?","text":"<p>ODK-AI is an extension of the Ontology Development Kit (ODK) that incorporates AI capabilities to assist with ontology development.</p>"},{"location":"faq/#what-is-odk","title":"What is ODK?","text":"<p>...</p>"},{"location":"faq/#how-is-odk-ai-different-from-odk","title":"How is ODK-AI different from ODK?","text":"<p>ODK-AI builds on the standard ODK framework but adds AI-powered tools to help with tasks like ontology term creation, consistency checking, and documentation generation.</p>"},{"location":"faq/#is-odk-ai-production-ready","title":"Is ODK-AI production ready?","text":"<p>No! </p>"},{"location":"faq/#installation","title":"Installation","text":""},{"location":"faq/#how-do-i-install-odk-ai","title":"How do I install ODK-AI?","text":"<p>ODK-AI is distributed as a Docker image. You can build it using the Makefile in this repository or pull a pre-built image.</p>"},{"location":"faq/#what-are-the-system-requirements","title":"What are the system requirements?","text":"<p>ODK-AI requires Docker to be installed on your system. The AI components may have additional memory requirements beyond standard ODK.</p>"},{"location":"faq/#usage","title":"Usage","text":""},{"location":"faq/#how-do-i-start-using-odk-ai-with-my-ontology","title":"How do I start using ODK-AI with my ontology?","text":"<p>Follow the documentation in the \"Getting Started\" section to initialize ODK-AI with your existing ontology project.</p>"},{"location":"faq/#can-odk-ai-work-with-existing-odk-projects","title":"Can ODK-AI work with existing ODK projects?","text":"<p>Yes, ODK-AI is designed to be compatible with existing ODK-based ontology projects.</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#what-should-i-do-if-i-encounter-errors","title":"What should I do if I encounter errors?","text":""},{"location":"faq/#where-can-i-get-help","title":"Where can I get help?","text":"<p>You can file issues on the GitHub repository or on OBO slack</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#building","title":"Building","text":"<p>Images are pushed to <code>cmungall/odk-ai</code> (https://hub.docker.com/r/cmungall/odk-ai) but these may be stale. </p> <p>You can check out this repo and build locally:</p> <pre><code>make build\n</code></pre>"},{"location":"getting-started/#initial-setup-and-interactive-use","title":"Initial Setup and Interactive Use","text":"<p>You will need an API key for Claude.</p> <p>First <code>cd</code> to the directory that is top level of your ODK-compliant ontology repo:</p> <pre><code>docker run -v $PWD:/work -e ANTHROPIC_API_KEY=$ANTHROPIC_API_KEY -e PERPLEXITY_API_KEY=$PERPLEXITY_API_KEY -e EMAIL=yourname@gmail.com -it --rm cmungall/odk-ai:latest bash\n</code></pre> <p>On the first run, a <code>CLAUDE.md</code> will be placed in the top level (unless one is there already). You will need to customize this. You can do this manually or let Claude do it.</p> <p>Once in the shell, you can type:</p> <pre><code>claude\n</code></pre> <p>Follow the instructions to authenticate.</p> <p>Config will be in <code>/root/.claude.json</code> (TODO: persist this)</p> <p>You can use this just as you would use claude code.</p>"},{"location":"headless-mode/","title":"Headless Mode","text":"<p>ODK-AI can be used in a non-interactive headless mode, which is useful for:</p> <ul> <li>Creating ontologies in YOLO mode</li> <li>Using in GitHub Actions</li> </ul> <p>You can run Claude with specific instructions via command line:</p> <pre><code>claude -p \"&lt;YOUR INSTRUCTIONS&gt;\" --output-format stream-json\n</code></pre> <p>For example:</p> <pre><code>claude -p \"fix issue 123\" --output-format stream-json\n</code></pre> <p>Your <code>CLAUDE.md</code> has instructions on how to read an issue (using <code>gh issue view</code>, which is in this docker image, thanks to ODK). It should read the issue, try to solve it, and make a branch and PR.</p> <p>You should keep an eye on what it is doing. Currently there are no guardrails to stop it racking up charges as it goes down rabbit holes.</p>"},{"location":"headless-mode/#example","title":"Example","text":"<p>Here's an example of a PR created by Claude:</p> <ul> <li>uberon#3508</li> </ul>"},{"location":"interactive-mode/","title":"Interactive Mode","text":"<p>Some knowledge required</p> <p>Currently we assume some knowledge of BOTH ODK and Claude Code. Check back later for more user-friendly docs!</p> <p>ODK-AI is designed to be used interactively, allowing you to work with Claude directly through a terminal interface on your ontology projects.</p>"},{"location":"interactive-mode/#starting-an-interactive-session","title":"Starting an Interactive Session","text":"<p>First, navigate to your ontology project directory </p> <pre><code>cd ~/repos/my-ontology\n</code></pre> <p>and run the container:</p> <pre><code>docker run -v $PWD:/work \\\n  -e ANTHROPIC_API_KEY=$ANTHROPIC_API_KEY \\\n  -e PERPLEXITY_API_KEY=$PERPLEXITY_API_KEY \\\n  -e EMAIL=your.email@example.com \\\n  -it --rm cmungall/odk-ai:latest bash\n</code></pre> <p>This command:</p> <ul> <li>Mounts your current directory to <code>/work</code> in the container</li> <li>Passes your Anthropic API key for Claude access</li> <li>Optionally passes a Perplexity API key for web search and deep research queries (optional)</li> <li>Provides your email (for using NCBI eutils services) (optional)</li> <li>Opens an interactive bash shell</li> </ul>"},{"location":"interactive-mode/#using-claude","title":"Using Claude","text":"<p>Once inside the container, start a Claude session by running:</p> <pre><code>claude\n</code></pre> <p>You will see this:</p> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 \u273b Welcome to Claude Code research preview! \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557      \u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\n \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\n \u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \n \u2588\u2588\u2551     \u2588\u2588\u2551     \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d  \n \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\n  \u255a\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557                \n \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d                \n \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557                  \n \u2588\u2588\u2551     \u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u255d                  \n \u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557                \n  \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre> <p>and options to configure</p> <p>Follow the authentication instructions. On first run, you'll need to authenticate with Anthropic's servers.</p> <p>Note that because you are in Docker it won't be able to open a web browser. It will give you a URL to open. Follow the instructions.</p> <p>Proceed with caution!</p> <p>Use of claude code for creating ontologies or code can be costly, please proceed cautiously! Check back later on how to use this via proxies</p> <p>It will store these settings in <code>~/.claude/</code> (TODO: these will be lost when you exit the container -- see below)</p> <p>After authentication, you can interact with Claude directly through the terminal. Claude has access to:</p> <ul> <li>Your ontology files (standard ODK location, <code>src/ontology/</code>)</li> <li>GitHub CLI (<code>gh</code>) for issue/PR management</li> <li>ROBOT and other ODK tools</li> <li>OBO scripts for manipulating ontology files</li> </ul> <p>OBO Format is assumed</p> <p>Currently the pre-defined workflow works best for ontologies that have their source in <code>.obo</code> format. (You should be doing this anyway, obo format is best for humans AND AI) You can try modifying the workflow for e.g. <code>.ofn</code> but we don't support this yet</p>"},{"location":"interactive-mode/#github-authentication","title":"GitHub authentication","text":"<p>For best experience, type</p> <p><code>gh auth login</code></p> <p>And follow the instructions to authenticate. this will allow Claude Code to create PRs and comment on issues/PRs on your behalf.</p>"},{"location":"interactive-mode/#example-interactions","title":"Example Interactions","text":"<p>Here are some example commands you might use with Claude:</p> <pre><code># Ask Claude to summarize an issue\nclaude \"Summarize issues 123\"\n\n# Request Claude to add a new term\nclaude \"Add a new term for 'cardiac muscle cell' with appropriate relationships and definitions\"\n\n# Ask Claude to fix an issue\nclaude \"Fix issue 456\"\n\n\n# Ask Claude to review a PR\nclaude \"Review PR 567. Post comments on the PR, and then if you think it is ready, approve and merge\"\n</code></pre> <p>Proceed with caution!</p> <p>By default, we give Claude Code a lot of permissions. Proceed with caution!</p>"},{"location":"interactive-mode/#working-with-ontology-files","title":"Working with Ontology Files","text":"<p>Claude is configured to work with <code>.obo</code> format files. It uses some scripts from obo-scripts. While these scripts are dated, they are much faster than many more modern methods.</p> <p>When editing ontologies:</p> <ol> <li>Claude will use <code>obo-checkout.pl</code> to extract specific terms for editing into <code>terms/</code></li> <li>Changes are made to the extracted files</li> <li>Claude will use <code>obo-checkin.pl</code> to merge changes back into the main ontology file</li> </ol> <p>This workflow helps manage the complexity of large ontology files.</p>"},{"location":"interactive-mode/#configuration-files","title":"Configuration Files","text":"<p>Claude's configuration is stored in:</p> <pre><code>/root/.claude.json\n</code></pre> <p>After authentication, you may want to save this configuration for future sessions. See the Configuration section for details on persisting your settings between container runs.</p>"},{"location":"roadmap/","title":"Roadmap","text":"<p>Here are the planned improvements for ODK-AI:</p> <ul> <li>Standardize <code>CLAUDE.md</code> format and functionality</li> <li>Explore integration with other AI assistants:</li> <li><code>cborg-code</code></li> <li><code>aider</code></li> <li>Adapt for other semantic artifacts:</li> <li>Knowledge Graphs</li> <li>LinkML schemas</li> <li>Improve persistence of configuration between sessions</li> <li>Add more guardrails to prevent unnecessary API usage</li> </ul>"},{"location":"how-tos/de-novo-ontology/","title":"Creating an ontology de-novo","text":""},{"location":"how-tos/de-novo-ontology/#creating-the-repo","title":"Creating the repo","text":""},{"location":"how-tos/de-novo-ontology/#populating-the-upper-levels","title":"Populating the upper levels","text":""},{"location":"how-tos/de-novo-ontology/#populating-a-branch-interactive-mode","title":"Populating a branch (interactive mode)","text":""},{"location":"how-tos/de-novo-ontology/#populating-a-branch-headless-mode","title":"Populating a branch (headless mode)","text":""},{"location":"how-tos/multi-account/","title":"Multi-account setup","text":"<p>Assume you have the following GitHub accounts</p> <ul> <li><code>@ont-coder-agent</code> - you use this primarily as the account for editing the ontology and making PRs</li> <li><code>@ont-review-agent</code> - reviews PRs, plans tasks and makes issues</li> </ul>"},{"location":"how-tos/multi-account/#directory-setup","title":"Directory setup","text":"<pre><code>mkdir repos\nmkdir repos/ont-coder-agent\nmkdir repos/ont-review-agent\n</code></pre> <p>Each folder will belong to a different agent; they can have multiple repos cloned.</p> <p>Convenience tip</p> <p>Authentication and authorization is easier if you have a Chrome profile for each account</p>"},{"location":"how-tos/multi-account/#setting-up-ont-coder-agent","title":"Setting up <code>@ont-coder-agent</code>","text":"<pre><code>cd repos/ont-coder-agent\nGITHUB_NAME=ont-coder-agent \\\n  odkai.sh\n</code></pre> <p>You will now be in the odkai docker shell. Next we will authenticate:</p> <pre><code>gh auth login\n</code></pre> <p>follow the instructions (being sure to do this for the right account), copy the code</p> <p>Then, in order to make PRs:</p> <p><code>gh auth setup-git</code></p> <p>Note that your configuration should be saved between sessions</p> <p>Next start <code>claude</code> (or your favorite terminal coding agent):</p> <p><code>claude</code></p> <p>You will need to authenticate Claude. Note this is different from GitHub authentication, and you should use whichever Chrome profile you use for your Anthropic account.</p> <p>This config should persist between ODK-AI invocations.</p> <p>Next, you can clone as many ontologies as you want the coder to contribute to. Depending on how the repo is set up, you may wish to work on your own fork:</p> <p><code>git clone https://github.com/ont-coder-agent/my-ont.git</code></p> <p>Or on origin:</p> <p><code>git clone https://github.com/my-ontology-org/my-ont.git</code></p> <p>Now change to that directory and set up <code>CLAUDE.md</code></p> <p><code>jinja2 /root/CLAUDE.md.jinja2 -D \"project_id=&lt;&lt;my-ont&gt;&gt;\"  &gt; CLAUDE.md</code></p> <p>Set up git usernames:</p> <pre><code>git config user.name \"dragon-ai-agent\"\ngit config user.email \"cmungall+dragon-ai-agent@gmail.com\"\n</code></pre>"},{"location":"how-tos/multi-account/#setting-up-ont-review-agent","title":"Setting up <code>@ont-review-agent</code>","text":"<p>As above, but modifying the handle:</p> <pre><code>cd repos/ont-review-agent\n&lt;&lt;run docker command&gt;&gt;\ngh auth login\n</code></pre> <p>being sure to authenticate as <code>@ont-review-agent</code></p>"},{"location":"how-tos/multi-account/#workflow","title":"Workflow","text":"<p>You will likely want to have two terminal windows open at the same time. This could be from your IDE or in a standard Terminal app. Having some way to distinguish them visually might help.</p>"}]}